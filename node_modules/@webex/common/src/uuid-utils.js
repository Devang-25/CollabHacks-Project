import {encode, decode} from './base64';
import {SDK_EVENT, hydraTypes} from './constants';

const hydraBaseResource = 'ciscospark://us';
const hydraBaseUrl = 'https://api.ciscospark.com/v1';

/**
 * Constructs a Hydra ID for a given UUID and type.
 *
 * @export
 * @param {string} type one of PEOPLE, TEAM, ROOM
 * @param {any} id
 * @returns {string}
 */
export function constructHydraId(type, id) {
  return encode(`${hydraBaseResource}/${type.toUpperCase()}/${id}`);
}

/**
 * Deconstructs a Hydra ID and provides the UUID.
 *
 * @export
 * @param {String} id
 * @returns {String}
 */
export function deconstructHydraId(id) {
  const payload = decode(id).split('/');

  return {
    id: payload.pop(),
    type: payload.pop()
  };
}

/**
 * Constructs a Hydra ID for a message based on internal UUID
 *
 * @export
 * @param {any} uuid
 * @returns {string}
 */
export function buildHydraMessageId(uuid) {
  return constructHydraId(hydraTypes.MESSAGE, uuid);
}

/**
 * Constructs a Hydra ID for a person based on internal UUID
 *
 * @export
 * @param {any} uuid
 * @returns {string}
 */
export function buildHydraPersonId(uuid) {
  return constructHydraId(hydraTypes.PEOPLE, uuid);
}

/**
 * Constructs a Hydra ID for a room based on internal UUID
 *
 * @export
 * @param {any} uuid
 * @returns {string}
 */
export function buildHydraRoomId(uuid) {
  return constructHydraId(hydraTypes.ROOM, uuid);
}

/**
 * Constructs a Hydra ID for an organization based on internal UUID
 *
 * @export
 * @param {any} uuid
 * @returns {string}
 */
export function buildHydraOrgId(uuid) {
  return constructHydraId(hydraTypes.ORGANIZATION, uuid);
}

/**
 * Constructs a Hydra ID for an membership based on an
 * internal UUID for the person, and the space
 *
 * @export
 * @param {any} personUUID
 * @param {any} spaceUUID
 * @returns {string}
 */
export function buildHydraMembershipId(personUUID, spaceUUID) {
  return constructHydraId(hydraTypes.MEMBERSHIP,
    `${personUUID}:${spaceUUID}`);
}

/**
 * Returns a Hydra roomType based on conversation tags
 *
 * @export
 * @param {arra} tags
 * @param {any} spaceUUID
 * @returns {string}
 */
export function getHydraRoomType(tags) {
  if (tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {
    return SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;
  }

  return SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;
}

/**
 * Returns file URLs for the activity, adhering to Hydra details,
 * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...
 * @see https://developer.webex.com/docs/api/v1/messages/get-message-details
 * @param {Object} activity from mercury
 * @returns {Array} file URLs
 */
export function getHydraFiles(activity) {
  const hydraFiles = [];
  const {files} = activity.object;

  if (files) {
    const {items} = files;

    // Note: Generated ID is dependent on file order.
    for (let i = 0; i < items.length; i += 1) {
      const contentId =
        constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`);

      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);
    }
  }

  return hydraFiles;
}
