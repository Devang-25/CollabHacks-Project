/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

import MockWebex from '@webex/test-helper-mock-webex';
import {assert} from '@webex/test-helper-chai';
import sinon from '@webex/test-helper-sinon';
import {cloneDeep} from 'lodash';
import deviceFixture from '../lib/device-fixture';
import Device from '@webex/internal-plugin-wdm';

describe('plugin-wdm', () => {
  describe('FeaturesModel', () => {
    let webex;
    let deviceFeaturesChangeDeveloperSpy;
    let deviceChangeFeaturesDeveloperSpy;
    let deviceChangeFeaturesSpy;
    let deviceChangeSpy;
    let webexChangeSpy;
    let webexChangeDeviceSpy;
    let webexChangeDeviceFeaturesSpy;
    let webexChangeDeviceFeaturesDeveloperSpy;

    beforeEach(() => {
      webex = new MockWebex({
        children: {
          device: Device
        }
      });

      webex.internal.device._processRegistrationSuccess({body: cloneDeep(deviceFixture)});

      deviceFeaturesChangeDeveloperSpy = sinon.spy();
      deviceChangeFeaturesDeveloperSpy = sinon.spy();
      deviceChangeFeaturesSpy = sinon.spy();
      deviceChangeSpy = sinon.spy();
      webexChangeSpy = sinon.spy();
      webexChangeDeviceSpy = sinon.spy();
      webexChangeDeviceFeaturesSpy = sinon.spy();
      webexChangeDeviceFeaturesDeveloperSpy = sinon.spy();

      webex.internal.device.features.on('change:developer', deviceFeaturesChangeDeveloperSpy);
      webex.internal.device.on('change:features.developer', deviceChangeFeaturesDeveloperSpy);
      webex.internal.device.on('change:features', deviceChangeFeaturesSpy);
      webex.internal.device.on('change', deviceChangeSpy);
      webex.on('change', webexChangeSpy);
      webex.on('change:internal.device', webexChangeDeviceSpy);
      webex.on('change:internal.device.features', webexChangeDeviceFeaturesSpy);
      webex.on('change:internal.device.features.developer', webexChangeDeviceFeaturesDeveloperSpy);
    });

    describe('when a feature is added', () => {
      it('emits a change event', () => {
        webex.internal.device.features.developer.add({
          key: 'another-developer-feature',
          val: 'true',
          value: true,
          mutable: false
        });

        assert.calledOnce(deviceFeaturesChangeDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesSpy);
        assert.calledOnce(deviceChangeSpy);
        assert.calledOnce(webexChangeSpy);
        assert.calledOnce(webexChangeDeviceSpy);
        assert.calledOnce(webexChangeDeviceFeaturesSpy);
        assert.calledOnce(webexChangeDeviceFeaturesDeveloperSpy);
      });
    });

    describe('when a feature changes', () => {
      it('emits a change event', () => {
        const data = cloneDeep(deviceFixture);

        data.features.developer[1] = {
          key: 'another-feature',
          val: 'false',
          value: false,
          mutable: false
        };
        webex.internal.device._processRegistrationSuccess({body: data});

        assert.calledOnce(deviceFeaturesChangeDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesSpy);
        assert.calledOnce(deviceChangeSpy);
        assert.calledOnce(webexChangeSpy);
        assert.calledOnce(webexChangeDeviceSpy);
        assert.calledOnce(webexChangeDeviceFeaturesSpy);
        assert.calledOnce(webexChangeDeviceFeaturesDeveloperSpy);
      });
    });

    describe('when a feature is removed', () => {
      it('emits a change event', () => {
        const data = cloneDeep(deviceFixture);

        data.features.developer.pop();
        webex.internal.device._processRegistrationSuccess({body: data});

        assert.calledOnce(deviceFeaturesChangeDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesDeveloperSpy);
        assert.calledOnce(deviceChangeFeaturesSpy);
        assert.calledOnce(deviceChangeSpy);
        assert.calledOnce(webexChangeSpy);
        assert.calledOnce(webexChangeDeviceSpy);
        assert.calledOnce(webexChangeDeviceFeaturesSpy);
        assert.calledOnce(webexChangeDeviceFeaturesDeveloperSpy);
      });
    });
  });
});
